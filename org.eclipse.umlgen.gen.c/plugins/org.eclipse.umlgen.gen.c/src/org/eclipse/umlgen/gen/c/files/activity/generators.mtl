[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2010 Obeo and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Stephane Thibaudeau (Obeo) - initial API and implementation
[/comment]
[module generators('http://www.eclipse.org/uml2/3.0.0/UML', 'http://www.eclipse.org/emf/2002/Ecore')/]
[import org::eclipse::umlgen::gen::c::files::activity::services /]
[import org::eclipse::umlgen::gen::c::files::activity::opaqueaction /]
[import org::eclipse::umlgen::gen::c::files::activity::loop /]
[import org::eclipse::umlgen::gen::c::files::activity::switch /]
[import org::eclipse::umlgen::gen::c::files::activity::if /]
[import org::eclipse::umlgen::gen::c::files::activity::comments /]


[template public next (node : ActivityNode) post (trim())]
[node.outgoing.target->reject(isReferencedByClause()).gen()/]
[/template]

[template public gen (node : ActivityNode) ]
/* TODO: implement gen for [node.eClass()/] (seen as ActivityNode)*/
[next()/]
[/template]

[template public gen (node : InitialNode) post (trim())]
[next()/]
[/template]

[template public gen (node : ActivityFinalNode) ]
[/template]

[template public gen (action : OpaqueAction) post (trim()) ]
[action.generate()/]
[next()/]
[/template]

[template public gen (flowFinal : FlowFinalNode) ? (name = 'break') post (trim())]
[commentBefore()/]
break; [commentSameLine()/]
[/template]

[template public gen (flowFinal : FlowFinalNode) ? (name = 'continue') post (trim())]
[commentBefore()/]
continue; [commentSameLine()/]
[/template]

[template public gen (flowFinal : FlowFinalNode) post (trim())]
[commentBefore()/]
[commentSameLine()/]
[/template]

[template public gen (loop : LoopNode) post (trim())]
[loop.generate()/]
[next()/]
[/template]

[template public gen (switch : ConditionalNode) ]
[switch.generate()/]
[next()/]
[/template]

[template public gen (decisionNode : DecisionNode) post (trim())]
[decisionNode.generate()/]
[decisionNode.getCorrespondingMergeNode().next()/]
[/template]

[template public gen (mergeNode : MergeNode) post (trim())]
[/template]