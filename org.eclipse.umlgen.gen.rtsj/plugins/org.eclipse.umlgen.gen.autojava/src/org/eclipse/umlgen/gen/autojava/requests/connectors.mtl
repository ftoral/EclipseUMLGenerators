[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012 Obeo, CNES
 * All rights reserved.  This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 1.0
 * 
 * You can apply any license to the files generated with this module and Acceleo.
 * 
 * Original contributors : Obeo
 *   Contributors : 
 * 	 Obeo - Cedric Notot
[/comment]

[module connectors('http://www.eclipse.org/uml2/4.0.0/UML','http://www.eclipse.org/umlgen/dsl/eth','http://www.eclipse.org/umlgen/dsl/asl')]

[import org::eclipse::umlgen::gen::autojava::requests::port /]

[query public isAsynchronous(aConnector : Connector) : Boolean = aConnector.end->select(aConnectorEnd : ConnectorEnd | aConnectorEnd.role.oclAsType(Port).isProviderASync())->notEmpty() /]

[query public isSynchronous(aConnector : Connector) : Boolean = aConnector.end->select(aConnectorEnd : ConnectorEnd | aConnectorEnd.role.oclAsType(Port).isProviderSync())->notEmpty() /]

[query public getTarget(aConnector : Connector) : Port = aConnector.end.role.oclAsType(Port)->select(aPort : Port | not aPort.type.oclIsUndefined())->first() /]

[query public getTargetInstance(aConnector : Connector) : Property = aConnector.end->select(c : ConnectorEnd | not c.role.oclAsType(Port).type.oclIsUndefined()).partWithPort->any(true)/]

[query public getOutgoingConnectors(aPort : Port, aContainer : Container) : OrderedSet(Connector) = aContainer.components.getOutgoingConnectors(aPort)->asOrderedSet()/]

[query public getOutgoingConnectors(aCompInstance : Property, aPort : Port) : OrderedSet(Connector) = aCompInstance.getOutgoingConnectorEnds(aPort).eContainer(Connector)->asOrderedSet() /]

[query public getTargets(aPort : Port) : Sequence(Port) = (aPort.end.eContainer(Connector).end->asOrderedSet() - aPort.end->asOrderedSet()).role->filter(Port)->asSequence() /]

[query public getTargetInstances(aCompInstance : Property, aPort : Port) : OrderedSet(Property) = aCompInstance.getOutgoingConnectors(aPort).getTargetInstance()->reject(p : Property | p.oclIsUndefined())->asOrderedSet()/]

[query public getTargetInstances(aPort : Port, aCompInstance : Property) : OrderedSet(Property) = getTargetInstances(aCompInstance, aPort)/]

[query public keepConnectorsToMe(connectors : OrderedSet(Connector), me : Container) : OrderedSet(Connector) = connectors->select(c : Connector | me.components->includes(c.getTargetInstance())) /]

[query protected getOutgoingConnectorEnds(aCompInstance : Property, aPort : Port) : OrderedSet(ConnectorEnd) = aPort.end->select(c : ConnectorEnd | c.partWithPort = aCompInstance) /]