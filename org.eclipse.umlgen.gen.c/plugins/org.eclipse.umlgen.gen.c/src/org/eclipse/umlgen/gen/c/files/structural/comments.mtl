[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2010, 2014 Obeo and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Mikael Barbero (Obeo) - initial API and implementation
[/comment]
[module comments('http://www.eclipse.org/uml2/3.0.0/UML', 'http://www.eclipse.org/emf/2002/Ecore')/]
[import org::eclipse::umlgen::gen::c::files::common /]

[query private getCommentAfter(e : EModelElement) : String = 
	if e.getAnnotation('http://www.eclipse.org/documentation', 'C_INLINE_COMMENT_AFTER_DECLARATION')->notEmpty() then
		e.getAnnotation('http://www.eclipse.org/documentation', 'C_INLINE_COMMENT_AFTER_DECLARATION')->any(true)
	else
		if e.getAnnotation('http://www.eclipse.org/documentation', 'H_INLINE_COMMENT_AFTER_DECLARATION')->notEmpty() then
			e.getAnnotation('http://www.eclipse.org/documentation', 'H_INLINE_COMMENT_AFTER_DECLARATION')->any(true)
		else
			''
		endif
	endif
/]

[query private getCommentBefore(e : EModelElement) : String = 
	if e.getAnnotation('http://www.eclipse.org/documentation', 'C_INLINE_COMMENT_BEFORE_DECLARATION')->notEmpty() then
		e.getAnnotation('http://www.eclipse.org/documentation', 'C_INLINE_COMMENT_BEFORE_DECLARATION')->any(true)
	else
		if e.getAnnotation('http://www.eclipse.org/documentation', 'H_INLINE_COMMENT_BEFORE_DECLARATION')->notEmpty() then
			e.getAnnotation('http://www.eclipse.org/documentation', 'H_INLINE_COMMENT_BEFORE_DECLARATION')->any(true)
		else
			''
		endif
	endif
/]

[query public hasComment(e : EModelElement) : Boolean = 
	if e.getAnnotation('http://www.eclipse.org/documentation', 'documentation')->notEmpty() then
		true
	else
		false
	endif
/]

[query public getComment(e : EModelElement) : String = 
	if hasComment(e) then
		e.getAnnotation('http://www.eclipse.org/documentation', 'documentation')->any(true)
	else
		''
	endif
/]

[template public genComment(elt : EModelElement)]
[if (elt.hasComment())]
[elt.getComment().format()/]
[/if]
[/template]

[template public commentsAfterTrim(e : EModelElement) post (trim())]
[let generatedComment : String = getCommentAfter()]
[if (generatedComment.size() > 0)][generatedComment.formatInLine()/][/if]
[/let]
[/template]

[template public commentsBeforeTrim(e : EModelElement) post (trim())]
[let generatedComment : String = getCommentBefore()]
[if (generatedComment.size() > 0)][generatedComment.formatInLine()/][/if]
[/let]
[/template]

[comment]Do not set a post trim() operation otherwise withspaces will be lost[/comment]
[comment]Find and add a comment for a EModelElement[/comment]
[template public addComment(elt : EModelElement, generated : String)]
[if (generated.trim().size() > 0)]
[let generatedComment : String = elt.getComment()]
[if (generatedComment.size() > 0)]
[generatedComment.format()/]
[/if]
[/let]
[generated/]
[/if][/template]

[comment]Find and add a comment for an Operation[/comment]
[comment]If no documentation is directly attached to the operation, we should take a look to the attached behavior[/comment]
[template public addComment(operation : Operation, generated : String)]
[if (generated.trim().size() > 0)]
[let generatedComment : String = operation.getComment()]
[if (generatedComment.size() > 0)]
[generatedComment.format()/]
[elseif operation.method->any(b : Behavior | b.name = operation.name)->notEmpty()]
[let generatedComment : String = operation.method->any(b : Behavior | b.name = operation.name).getComment()]
[if (generatedComment.size() > 0)]
[generatedComment.format()/]
[/if]
[/let]
[/if]
[/let]
[generated/]
[/if][/template]
