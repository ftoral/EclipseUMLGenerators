<?xml version="1.0" encoding="UTF-8"?>
<uml:Model xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xmi:id="_9TLdwHouEd-aebg4GsEJxw" name="testEmptyActivity">
  <packagedElement xmi:type="uml:Activity" xmi:id="_9UDngHouEd-aebg4GsEJxw" name="main">
    <node xmi:type="uml:OpaqueAction" xmi:id="_9UDngXouEd-aebg4GsEJxw" name="int         ..." outgoing="_9UEOw3ouEd-aebg4GsEJxw" incoming="_9UEO7XouEd-aebg4GsEJxw">
      <language>C</language>
      <body>int                   opt;&#xA;int                   err;&#xA;uint16_t              des_s, gs, cs; /* ds=es=fs */&#xA;Elf32_Phdr            ep;&#xA;uint16_t              ldt_ix;&#xA;NaClAllModulesInit();</body>
    </node>
    <node xmi:type="uml:LoopNode" xmi:id="_9UDngnouEd-aebg4GsEJxw" name="while ((opt = getopt(ac, av, &quot;n:v&quot;)) != -1)" outgoing="_9UEOxnouEd-aebg4GsEJxw" incoming="_9UEOw3ouEd-aebg4GsEJxw" isTestedFirst="true" bodyPart="_9UDniXouEd-aebg4GsEJxw" decider="_9UDnh3ouEd-aebg4GsEJxw" test="_9UDnhnouEd-aebg4GsEJxw">
      <edge xmi:type="uml:ControlFlow" xmi:id="_9UDng3ouEd-aebg4GsEJxw" source="_9UDniXouEd-aebg4GsEJxw" target="_9UEOrHouEd-aebg4GsEJxw">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UDnhHouEd-aebg4GsEJxw" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_9UDnhXouEd-aebg4GsEJxw" value="1"/>
      </edge>
      <node xmi:type="uml:OpaqueAction" xmi:id="_9UDnhnouEd-aebg4GsEJxw" name="(opt = getop...">
        <language>C</language>
        <outputValue xmi:id="_9UDnh3ouEd-aebg4GsEJxw">
          <upperBound xmi:type="uml:LiteralNull" xmi:id="_9UDniHouEd-aebg4GsEJxw"/>
        </outputValue>
        <body>(opt = getopt(ac, av, &quot;n:v&quot;)) != -1</body>
      </node>
      <node xmi:type="uml:ConditionalNode" xmi:id="_9UDniXouEd-aebg4GsEJxw" name="switch (opt)" outgoing="_9UDng3ouEd-aebg4GsEJxw" isAssured="true">
        <edge xmi:type="uml:ControlFlow" xmi:id="_9UEOkHouEd-aebg4GsEJxw" source="_9UEOnXouEd-aebg4GsEJxw" target="_9UEOnnouEd-aebg4GsEJxw">
          <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEOkXouEd-aebg4GsEJxw" value="true"/>
          <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEOknouEd-aebg4GsEJxw" value="1"/>
        </edge>
        <edge xmi:type="uml:ControlFlow" xmi:id="_9UEOk3ouEd-aebg4GsEJxw" source="_9UEOonouEd-aebg4GsEJxw" target="_9UEOo3ouEd-aebg4GsEJxw">
          <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEOlHouEd-aebg4GsEJxw" value="true"/>
          <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEOlXouEd-aebg4GsEJxw" value="1"/>
        </edge>
        <edge xmi:type="uml:ControlFlow" xmi:id="_9UEOlnouEd-aebg4GsEJxw" source="_9UEOp3ouEd-aebg4GsEJxw" target="_9UEOqHouEd-aebg4GsEJxw">
          <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEOl3ouEd-aebg4GsEJxw" value="true"/>
          <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEOmHouEd-aebg4GsEJxw" value="1"/>
        </edge>
        <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOmXouEd-aebg4GsEJxw" name="test">
          <language>C</language>
          <body>opt</body>
        </node>
        <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOmnouEd-aebg4GsEJxw" name="case 'n'">
          <language>C</language>
          <outputValue xmi:id="_9UEOm3ouEd-aebg4GsEJxw">
            <upperBound xmi:type="uml:LiteralNull" xmi:id="_9UEOnHouEd-aebg4GsEJxw"/>
          </outputValue>
          <body>'n'</body>
        </node>
        <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOnXouEd-aebg4GsEJxw" name="num_syscalls..." outgoing="_9UEOkHouEd-aebg4GsEJxw">
          <language>C</language>
          <body>num_syscalls = strtoul(optarg, (char **) 0, 0);</body>
        </node>
        <node xmi:type="uml:FlowFinalNode" xmi:id="_9UEOnnouEd-aebg4GsEJxw" name="break" incoming="_9UEOkHouEd-aebg4GsEJxw"/>
        <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOn3ouEd-aebg4GsEJxw" name="case 'v'">
          <language>C</language>
          <outputValue xmi:id="_9UEOoHouEd-aebg4GsEJxw">
            <upperBound xmi:type="uml:LiteralNull" xmi:id="_9UEOoXouEd-aebg4GsEJxw"/>
          </outputValue>
          <body>'v'</body>
        </node>
        <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOonouEd-aebg4GsEJxw" name="NaClLogIncrV..." outgoing="_9UEOk3ouEd-aebg4GsEJxw">
          <language>C</language>
          <body>NaClLogIncrVerbosity();</body>
        </node>
        <node xmi:type="uml:FlowFinalNode" xmi:id="_9UEOo3ouEd-aebg4GsEJxw" name="break" incoming="_9UEOk3ouEd-aebg4GsEJxw"/>
        <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOpHouEd-aebg4GsEJxw" name="default">
          <language>C</language>
          <outputValue xmi:id="_9UEOpXouEd-aebg4GsEJxw">
            <upperBound xmi:type="uml:LiteralNull" xmi:id="_9UEOpnouEd-aebg4GsEJxw"/>
          </outputValue>
          <body>default</body>
        </node>
        <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOp3ouEd-aebg4GsEJxw" name="fprintf(stde..." outgoing="_9UEOlnouEd-aebg4GsEJxw">
          <language>C</language>
          <body>fprintf(stderr, &quot;Usage: switch [-n num_syscalls]\n&quot;);&#xA;return -1;</body>
        </node>
        <node xmi:type="uml:ActivityFinalNode" xmi:id="_9UEOqHouEd-aebg4GsEJxw" incoming="_9UEOlnouEd-aebg4GsEJxw"/>
        <clause xmi:id="_9UEOqXouEd-aebg4GsEJxw" test="_9UEOmnouEd-aebg4GsEJxw" body="_9UEOnXouEd-aebg4GsEJxw" successorClause="_9UEOqnouEd-aebg4GsEJxw" decider="_9UEOm3ouEd-aebg4GsEJxw"/>
        <clause xmi:id="_9UEOqnouEd-aebg4GsEJxw" test="_9UEOn3ouEd-aebg4GsEJxw" body="_9UEOonouEd-aebg4GsEJxw" predecessorClause="_9UEOqXouEd-aebg4GsEJxw" successorClause="_9UEOq3ouEd-aebg4GsEJxw" decider="_9UEOoHouEd-aebg4GsEJxw"/>
        <clause xmi:id="_9UEOq3ouEd-aebg4GsEJxw" test="_9UEOpHouEd-aebg4GsEJxw" body="_9UEOp3ouEd-aebg4GsEJxw" predecessorClause="_9UEOqnouEd-aebg4GsEJxw" decider="_9UEOpXouEd-aebg4GsEJxw"/>
      </node>
      <node xmi:type="uml:FlowFinalNode" xmi:id="_9UEOrHouEd-aebg4GsEJxw" name="end of loop" incoming="_9UDng3ouEd-aebg4GsEJxw"/>
    </node>
    <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOrXouEd-aebg4GsEJxw" name="des_s = NaCl..." outgoing="_9UEO0nouEd-aebg4GsEJxw" incoming="_9UEOxnouEd-aebg4GsEJxw">
      <language>C</language>
      <body>des_s = NaClLdtAllocateSelector(NACL_LDT_DESCRIPTOR_DATA,&#xA;                                  0,&#xA;                                  (void *) 0,&#xA;                                  kNumPagesMinus1);&#xA;/* don't know what values to use! */&#xA;gs = NaClGetGs();&#xA;cs = NaClLdtAllocateSelector(NACL_LDT_DESCRIPTOR_CODE,&#xA;                               0,&#xA;                               (void *) 0,&#xA;                               kNumPagesMinus1);&#xA;printf(&quot;des = 0x%x, gs = 0x%x, cs = 0x%x\n&quot;, des_s, gs, cs);&#xA;/*&#xD;&#xA;   * all three selectors give the entire address space, so should have&#xD;&#xA;   * no effect.&#xD;&#xA;   */&#xA;ldt_ix = gs >> 3;&#xA;printf(&quot;ldx_ix = 0x%x\n&quot;, ldt_ix);&#xA;printf(&quot;nacl_thread[%d] = 0x%08x\n&quot;, ldt_ix, (uintptr_t) nacl_thread[ldt_ix]);&#xA;printf(&quot;nacl_user[%d] = 0x%08x\n&quot;, ldt_ix, (uintptr_t) nacl_user[ldt_ix]);&#xA;printf(&quot;nacl_sys[%d] = 0x%08x\n&quot;, ldt_ix, (uintptr_t) nacl_sys[ldt_ix]);&#xA;/* fill in NaClApp object enough for code to work... */&#xA;NaClAppCtor(&amp;na);</body>
    </node>
    <node xmi:type="uml:DecisionNode" xmi:id="_9UEOrnouEd-aebg4GsEJxw" name="if (0 != (err = posix_memalign((void **) &amp;na.mem_start, 4 &lt;&lt; 12, 8 &lt;&lt; 12)))" outgoing="_9UEOzHouEd-aebg4GsEJxw _9UEOz3ouEd-aebg4GsEJxw" incoming="_9UEO0nouEd-aebg4GsEJxw"/>
    <node xmi:type="uml:MergeNode" xmi:id="_9UEOr3ouEd-aebg4GsEJxw" outgoing="_9UEO3nouEd-aebg4GsEJxw" incoming="_9UEOz3ouEd-aebg4GsEJxw"/>
    <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOsHouEd-aebg4GsEJxw" name="errno = err;..." outgoing="_9UEOyXouEd-aebg4GsEJxw" incoming="_9UEOzHouEd-aebg4GsEJxw">
      <language>C</language>
      <body>errno = err;&#xA;perror(&quot;posix_memalign&quot;);&#xA;return 1;</body>
    </node>
    <node xmi:type="uml:ActivityFinalNode" xmi:id="_9UEOsXouEd-aebg4GsEJxw" incoming="_9UEOyXouEd-aebg4GsEJxw"/>
    <node xmi:type="uml:DecisionNode" xmi:id="_9UEOsnouEd-aebg4GsEJxw" name="if (0 != mprotect((void *) na.mem_start,&#xA;                    8 &lt;&lt; 12,&#xA;                    PROT_READ | PROT_EXEC | PROT_WRITE))" outgoing="_9UEO2HouEd-aebg4GsEJxw _9UEO23ouEd-aebg4GsEJxw" incoming="_9UEO3nouEd-aebg4GsEJxw"/>
    <node xmi:type="uml:MergeNode" xmi:id="_9UEOs3ouEd-aebg4GsEJxw" outgoing="_9UEO4XouEd-aebg4GsEJxw" incoming="_9UEO23ouEd-aebg4GsEJxw"/>
    <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOtHouEd-aebg4GsEJxw" name="perror(&quot;mpro..." outgoing="_9UEO1XouEd-aebg4GsEJxw" incoming="_9UEO2HouEd-aebg4GsEJxw">
      <language>C</language>
      <body>perror(&quot;mprotect&quot;);&#xA;return 1;</body>
    </node>
    <node xmi:type="uml:ActivityFinalNode" xmi:id="_9UEOtXouEd-aebg4GsEJxw" incoming="_9UEO1XouEd-aebg4GsEJxw"/>
    <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOtnouEd-aebg4GsEJxw" name="na.phdrs = &amp;..." outgoing="_9UEO5HouEd-aebg4GsEJxw" incoming="_9UEO4XouEd-aebg4GsEJxw">
      <language>C</language>
      <body>na.phdrs = &amp;ep;&#xA;na.xlate_base = 0;&#xA;/* generate trampoline thunk */&#xA;NaClLoadTrampoline(&amp;na);&#xA;NaClLoadSpringboard(&amp;na);&#xA;syscall_tbl = (uintptr_t) na.mem_start;&#xA;/* start of trampoline */&#xA;printf(&quot;initializing main thread\n&quot;);&#xA;printf(&quot;ds = es = ss = 0x%x\n&quot;, des_s);&#xA;printf(&quot;gs = 0x%x\n&quot;, gs);&#xA;printf(&quot;cs = 0x%x\n&quot;, cs);&#xA;NaClAppPrepareToLaunch(&amp;na);&#xA;printf(&quot;after prepare to launch:\n&quot;);&#xA;printf(&quot;ds = es = ss = 0x%x\n&quot;, des_s);&#xA;printf(&quot;gs = 0x%x\n&quot;, gs);&#xA;printf(&quot;cs = 0x%x\n&quot;, cs);&#xA;na.code_seg_sel = cs;&#xA;na.data_seg_sel = des_s;&#xA;printf(&quot;na.code_seg_sel = 0x%02x\n&quot;, na.code_seg_sel);&#xA;printf(&quot;na.data_seg_sel = 0x%02x\n&quot;, na.data_seg_sel);&#xA;printf(&quot;&amp;na.code_seg_sel = 0x%08x\n&quot;, (uintptr_t) &amp;na.code_seg_sel);&#xA;printf(&quot;&amp;na.data_seg_sel = 0x%08x\n&quot;, (uintptr_t) &amp;na.data_seg_sel);&#xA;printf(&quot;&amp;nat = 0x%08x\n&quot;, (uintptr_t) &amp;nat);&#xA;printf(&quot;&amp;na = 0x%08x\n&quot;, (uintptr_t) &amp;na);&#xA;NaClAppThreadCtor(&amp;nat,&#xA;                    &amp;na,&#xA;                    (uintptr_t) app_thread,&#xA;                    ((uintptr_t) (&amp;stack + 1)) - 128,&#xA;                    gs);&#xA;printf(&quot;waiting for app thread to finish\n&quot;);&#xA;NaClMutexLock(&amp;nat.mu);</body>
    </node>
    <node xmi:type="uml:LoopNode" xmi:id="_9UEOt3ouEd-aebg4GsEJxw" name="while (nat.state != NACL_APP_THREAD_DEAD)" outgoing="_9UEO53ouEd-aebg4GsEJxw" incoming="_9UEO5HouEd-aebg4GsEJxw" isTestedFirst="true" bodyPart="_9UEOvnouEd-aebg4GsEJxw" decider="_9UEOvHouEd-aebg4GsEJxw" test="_9UEOu3ouEd-aebg4GsEJxw">
      <edge xmi:type="uml:ControlFlow" xmi:id="_9UEOuHouEd-aebg4GsEJxw" source="_9UEOvnouEd-aebg4GsEJxw" target="_9UEOv3ouEd-aebg4GsEJxw">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEOuXouEd-aebg4GsEJxw" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEOunouEd-aebg4GsEJxw" value="1"/>
      </edge>
      <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOu3ouEd-aebg4GsEJxw" name="nat.state !=...">
        <language>C</language>
        <outputValue xmi:id="_9UEOvHouEd-aebg4GsEJxw">
          <upperBound xmi:type="uml:LiteralNull" xmi:id="_9UEOvXouEd-aebg4GsEJxw"/>
        </outputValue>
        <body>nat.state != NACL_APP_THREAD_DEAD</body>
      </node>
      <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOvnouEd-aebg4GsEJxw" name="NaClCondVarW..." outgoing="_9UEOuHouEd-aebg4GsEJxw">
        <language>C</language>
        <body>NaClCondVarWait(&amp;nat.cv, &amp;nat.mu);</body>
      </node>
      <node xmi:type="uml:FlowFinalNode" xmi:id="_9UEOv3ouEd-aebg4GsEJxw" name="end of loop" incoming="_9UEOuHouEd-aebg4GsEJxw"/>
    </node>
    <node xmi:type="uml:OpaqueAction" xmi:id="_9UEOwHouEd-aebg4GsEJxw" name="NaClMutexUnl..." outgoing="_9UEO6nouEd-aebg4GsEJxw" incoming="_9UEO53ouEd-aebg4GsEJxw">
      <language>C</language>
      <body>NaClMutexUnlock(&amp;nat.mu);&#xA;printf(&quot;all done\n&quot;);&#xA;printf(&quot;freeing posix_memaligned memory\n&quot;);&#xA;free((void *) na.mem_start);&#xA;na.mem_start = 0;&#xA;printf(&quot;calling dtor\n&quot;);&#xA;NaClAppDtor(&amp;na);&#xA;printf(&quot;calling fini\n&quot;);&#xA;NaClAllModulesFini();&#xA;printf(&quot;quitting\n&quot;);&#xA;return 0;</body>
    </node>
    <node xmi:type="uml:ActivityFinalNode" xmi:id="_9UEOwXouEd-aebg4GsEJxw" incoming="_9UEO6nouEd-aebg4GsEJxw"/>
    <node xmi:type="uml:InitialNode" xmi:id="_9UEOwnouEd-aebg4GsEJxw" outgoing="_9UEO7XouEd-aebg4GsEJxw"/>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEOw3ouEd-aebg4GsEJxw" source="_9UDngXouEd-aebg4GsEJxw" target="_9UDngnouEd-aebg4GsEJxw">
      <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEOxHouEd-aebg4GsEJxw" value="true"/>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEOxXouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEOxnouEd-aebg4GsEJxw" source="_9UDngnouEd-aebg4GsEJxw" target="_9UEOrXouEd-aebg4GsEJxw">
      <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEOx3ouEd-aebg4GsEJxw" value="true"/>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEOyHouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEOyXouEd-aebg4GsEJxw" source="_9UEOsHouEd-aebg4GsEJxw" target="_9UEOsXouEd-aebg4GsEJxw">
      <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEOynouEd-aebg4GsEJxw" value="true"/>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEOy3ouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEOzHouEd-aebg4GsEJxw" source="_9UEOrnouEd-aebg4GsEJxw" target="_9UEOsHouEd-aebg4GsEJxw">
      <guard xmi:type="uml:OpaqueExpression" xmi:id="_9UEOzXouEd-aebg4GsEJxw">
        <language>C</language>
        <body>0 != (err = posix_memalign((void **) &amp;na.mem_start, 4 &lt;&lt; 12, 8 &lt;&lt; 12))</body>
      </guard>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEOznouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEOz3ouEd-aebg4GsEJxw" source="_9UEOrnouEd-aebg4GsEJxw" target="_9UEOr3ouEd-aebg4GsEJxw">
      <guard xmi:type="uml:OpaqueExpression" xmi:id="_9UEO0HouEd-aebg4GsEJxw">
        <language>C</language>
        <body>[else]</body>
      </guard>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEO0XouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEO0nouEd-aebg4GsEJxw" source="_9UEOrXouEd-aebg4GsEJxw" target="_9UEOrnouEd-aebg4GsEJxw">
      <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEO03ouEd-aebg4GsEJxw" value="true"/>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEO1HouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEO1XouEd-aebg4GsEJxw" source="_9UEOtHouEd-aebg4GsEJxw" target="_9UEOtXouEd-aebg4GsEJxw">
      <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEO1nouEd-aebg4GsEJxw" value="true"/>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEO13ouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEO2HouEd-aebg4GsEJxw" source="_9UEOsnouEd-aebg4GsEJxw" target="_9UEOtHouEd-aebg4GsEJxw">
      <guard xmi:type="uml:OpaqueExpression" xmi:id="_9UEO2XouEd-aebg4GsEJxw">
        <language>C</language>
        <body>0 != mprotect((void *) na.mem_start,&#xA;                    8 &lt;&lt; 12,&#xA;                    PROT_READ | PROT_EXEC | PROT_WRITE)</body>
      </guard>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEO2nouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEO23ouEd-aebg4GsEJxw" source="_9UEOsnouEd-aebg4GsEJxw" target="_9UEOs3ouEd-aebg4GsEJxw">
      <guard xmi:type="uml:OpaqueExpression" xmi:id="_9UEO3HouEd-aebg4GsEJxw">
        <language>C</language>
        <body>[else]</body>
      </guard>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEO3XouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEO3nouEd-aebg4GsEJxw" source="_9UEOr3ouEd-aebg4GsEJxw" target="_9UEOsnouEd-aebg4GsEJxw">
      <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEO33ouEd-aebg4GsEJxw" value="true"/>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEO4HouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEO4XouEd-aebg4GsEJxw" source="_9UEOs3ouEd-aebg4GsEJxw" target="_9UEOtnouEd-aebg4GsEJxw">
      <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEO4nouEd-aebg4GsEJxw" value="true"/>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEO43ouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEO5HouEd-aebg4GsEJxw" source="_9UEOtnouEd-aebg4GsEJxw" target="_9UEOt3ouEd-aebg4GsEJxw">
      <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEO5XouEd-aebg4GsEJxw" value="true"/>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEO5nouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEO53ouEd-aebg4GsEJxw" source="_9UEOt3ouEd-aebg4GsEJxw" target="_9UEOwHouEd-aebg4GsEJxw">
      <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEO6HouEd-aebg4GsEJxw" value="true"/>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEO6XouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEO6nouEd-aebg4GsEJxw" source="_9UEOwHouEd-aebg4GsEJxw" target="_9UEOwXouEd-aebg4GsEJxw">
      <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEO63ouEd-aebg4GsEJxw" value="true"/>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEO7HouEd-aebg4GsEJxw" value="1"/>
    </edge>
    <edge xmi:type="uml:ControlFlow" xmi:id="_9UEO7XouEd-aebg4GsEJxw" source="_9UEOwnouEd-aebg4GsEJxw" target="_9UDngXouEd-aebg4GsEJxw">
      <guard xmi:type="uml:LiteralBoolean" xmi:id="_9UEO7nouEd-aebg4GsEJxw" value="true"/>
      <weight xmi:type="uml:LiteralInteger" xmi:id="_9UEO73ouEd-aebg4GsEJxw" value="1"/>
    </edge>
  </packagedElement>
</uml:Model>
