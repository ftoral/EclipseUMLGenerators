[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2010 Obeo and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Mikael Barbero (Obeo) - initial API and implementation
[/comment]
[module common('http://www.eclipse.org/uml2/3.0.0/UML', 'http://www.eclipse.org/emf/2002/Ecore')/]
[import org::eclipse::umlgen::gen::c::files::structural::comments /]
[import org::eclipse::umlgen::gen::c::files::structural::valueSpecification /]

[query public cFileName(e : NamedElement) : String = 
	if (not getProperty('UNITTEST').oclIsUndefined()) 
		then e.name.concat('.c')
		else e.getRelativePath('C_FILENAME')
	endif
/]

[query public hFileName(e : NamedElement) : String = 
	if (not getProperty('UNITTEST').oclIsUndefined()) 
		then e.name.concat('.h')
		else e.getRelativePath('H_FILENAME')
	endif
/]

[query public getAnnotation(e : EModelElement, sourceP : String, keyP : String) : Sequence(String) = 
	if (e.eAnnotations->notEmpty()) then
		if (e.eAnnotations->select(source = sourceP)->notEmpty()) then
			if (e.eAnnotations->select(source = sourceP).details->notEmpty()) then
				if (e.eAnnotations->select(source = sourceP).details->select(key = keyP)->notEmpty()) then
					e.eAnnotations->select(source = sourceP).details->select(key = keyP).value->asSequence()
				else
					Sequence{}
				endif
			else
				Sequence{}
			endif
		else
			Sequence{}
		endif
	else
		Sequence{}
	endif
/]


[query public getReturnType(op : Operation) : Type = 
op.ownedParameter->select(direction <> ParameterDirectionKind::return)->first().type 
/]

[comment]Generate the include directives[/comment]
[template public genIncludes(c : Classifier, kind : String) post(trim())]
[for (usage : Usage | c.getClientDependencies()->filter(Usage)->select(u : Usage | u.isSelectableForGen(kind)))]
[if getComment().size() > 0]
[getComment().format()/]
[/if]
[if isStdLibraryInclusion()]
#include <[supplier->any(true).name/].h>
[else]
#include "[supplier->any(true).name/].h"
[/if][/for]
[/template]

[comment]This query is only here in the goal to obtain an ordered collection of dependency (not possible directly in OCL)[/comment]
[query public getClientDependencies(e : NamedElement) : Sequence(Dependency) =
	invoke('org.eclipse.umlgen.gen.c.services.UML2Services', 'getClientDependencies(org.eclipse.uml2.uml.NamedElement)', Sequence{e})
/]

[query public getRelativePath(e : NamedElement, s : String) : String = 
	invoke('org.eclipse.c2uml.util.AnnotationUtil', 'getRelativePath(org.eclipse.uml2.uml.NamedElement, java.lang.String)', Sequence{e,s})
/]

[query public format(s : String) : String =
	invoke('org.eclipse.c2uml.util.CommentFormatter', 'wrap(java.lang.String)', Sequence{s})
/]

[query public formatInLine(s : String) : String =
	invoke('org.eclipse.c2uml.util.CommentFormatter', 'wrapInLine(java.lang.String)', Sequence{s})
/]

[query public getSourcePackageName(e : NamedElement) : String = 
	invoke('org.eclipse.umlgen.gen.c.services.UML2Services', 'getSourcePackageName(org.eclipse.uml2.uml.NamedElement)', Sequence{e}) 
/]

[query private isStdLibraryInclusion(e : Usage) : Boolean =
	if (e.getAnnotation('http://www.eclipse.org/reverse', 'STD_LIBRARY')->notEmpty())
	  then e.getAnnotation('http://www.eclipse.org/reverse', 'STD_LIBRARY')->any(true) = 'true'
	  else false
	endif
/]

[query private isSelectableForGen(e : Usage, kind : String) : Boolean =
	(kind = 'C' and e.isPrivate()) or (kind = 'H' and e.isPublic())
/]

[query public IfNDefConditionAnnotation(e : Classifier) : Sequence(String) = 
	e.getAnnotation('http://www.eclipse.org/reverse', 'IFNDEF')
/]

[query public isRegister(e : NamedElement) : Boolean = 
	if (e.getAnnotation('http://www.eclipse.org/reverse', 'REGISTER')->notEmpty())
		then e.getAnnotation('http://www.eclipse.org/reverse', 'REGISTER')->any(true) = 'true'
		else false
	endif
/]

[query public isVolatile(e : NamedElement) : Boolean = 
	if (e.getAnnotation('http://www.eclipse.org/reverse', 'VOLATILE')->notEmpty())
		then e.getAnnotation('http://www.eclipse.org/reverse', 'VOLATILE')->any(true) = 'true'
		else false
	endif
/]

[query public isPointer(t : Type) : Boolean = 
	if (not name.oclIsUndefined() and name.index('*') > 0)
	then
		true
	else if (oclIsKindOf(DataType) and oclAsType(DataType).redefinedClassifier->size() > 0)
  		then oclAsType(DataType).redefinedClassifier->asSequence()->first().name.index('*') > 0
		else false
		endif
	endif
/]

[query public isPrivate(e : NamedElement) : Boolean = 
	e.visibility = VisibilityKind::private
/]

[query public isPublic(e : NamedElement) : Boolean = 
	e.visibility = VisibilityKind::public
/]

[template public commonGen(e : Property)]
[name/][if qualifier->select(name = 'size')->size() > 0][qualifier->select(name = 'size').defaultValue.serialize()/][/if][if not defaultValue.oclIsUndefined()] = [defaultValue.serialize()/][/if]
[/template]
